// Generated by CoffeeScript 1.9.3
(function() {
  var createAudioAnalyser, getAudioAnalyser, getDataArray, setupAudioStream;

  setupAudioStream = function(audioCtx, analyser, distortion, biquadFilter, convolver, gainNode) {
    if (navigator.getUserMedia) {
      return navigator.getUserMedia({
        audio: true
      }, (function(stream) {
        var source;
        source = audioCtx.createMediaStreamSource(stream);
        source.connect(analyser);
        analyser.connect(distortion);
        distortion.connect(biquadFilter);
        biquadFilter.connect(convolver);
        convolver.connect(gainNode);
        return gainNode.connect(audioCtx.destination);
      }), function(err) {
        return console.log(err);
      });
    } else {
      return console.log('getUserMedia not supported');
    }
  };

  createAudioAnalyser = function(audioCtx) {
    var analyser;
    analyser = audioCtx.createAnalyser();
    analyser.minDecibels = -90;
    analyser.maxDecibels = -10;
    analyser.smoothingTimeConstant = 0.85;
    analyser.fftSize = 32;
    return analyser;
  };

  getAudioAnalyser = function() {
    var analyser, audioCtx, biquadFilter, convolver, distortion, gainNode;
    audioCtx = new (window.AudioContext || window.webkitAudioContext);
    analyser = createAudioAnalyser(audioCtx);
    distortion = audioCtx.createWaveShaper();
    gainNode = audioCtx.createGain();
    biquadFilter = audioCtx.createBiquadFilter();
    convolver = audioCtx.createConvolver();
    setupAudioStream(audioCtx, analyser, distortion, biquadFilter, convolver, gainNode);
    return analyser;
  };

  getDataArray = function(analyser) {
    var bufferLength;
    bufferLength = analyser.frequencyBinCount;
    return new Uint8Array(bufferLength);
  };

  navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;

}).call(this);
